<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[记录下自用的 Windows 上常用的软件]]></title>
    <url>%2F2017%2F11%2F24%2Fmy-pc-windows-software%2F</url>
    <content type="text"><![CDATA[通讯 TIM WeChat 浏览器 Cent Browser 搜狗浏览器 番羽土啬 shadowsocks-windows shadowsocksr-csharp 抓包 Fiddler SSH Client MobaXterm Xshell 截图 ShareX 邮箱 网易邮箱大师 安全卫士 火绒 局域网控制 ShareMouse 命令行 cmder 云笔记 有道云笔记 文件下载 Internet Download Manager MarkDown Haroopad 远程 TeamViewer 数据库 Navicat 文本编辑器 Visual Studio Code Sublime Text Notepad++ 文件搜索 Everything Git GUI Source Tree 壁纸 爱壁纸 翻译 QTranslate 碎片整理 SmartDefrag]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>Windows Software</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的博客同步方案]]></title>
    <url>%2F2017%2F11%2F24%2Fwrite-blog-anywhere-anywhen%2F</url>
    <content type="text"><![CDATA[下面介绍下自己博客多设备同步方案。 自己的方案无论是自己的电脑还是公司的电脑还是其他电脑，通过 github 仓库来控制博客的源文件，然后多台电脑通过 pull or push 进行同步。 选择 github 作为版本控制原因如下 保存源文件，再也不用通过各种存储设备拷过来拷过去了； 可追溯以及自己的服务器不稳定； 增加文章曝光度。 写完文章后，在服务器本地仓库通过 hexo g 生成文件，将 public 文件下内容拷贝到 nginx 对应路径。 在一台空空如也的电脑上，需要安装 git 、 nodejs 、 hexo 。 安装 git可以通过 git 官网 提供的安装包进行下载安装，不多说。 安装 nodejs有很多方法，可以直接安装包安装也可以通过 nvm 下载管理 nodejs 版本，当然也有很多代理 npm 工具，eg: cnpm 、 yarn 。个人推荐 nvm 来安装 nodejs 。 直接从网站下载，中文网站 ，英文网站 通过 nvm 安装任意 nodejs ，方便切换任意 nodejs 版本 ，开源地址 ，Linux 安装教程可参考 在 Ubuntu 通过 nvm 安装 nodejs ，Windows 可下载 nvm-windows发布版本下载安装，可参考 nodejs在windows下的安装配置(使用NVM的方式) 教程安装。 下载 nvm 源码本地编译可阅读这篇文章快速搭建 Node.js 开发环境以及加速 npm 安装 hexo 任意路径 npm install hexo-cli -g 克隆的博客项目 npm install 验证一下 hexo server 可以搞一搞程序员不甘于进行重复工作，于是就想办法解（tou）决（lan）。 写个 bash 脚本，每天某个时间定时 git pull ，文件发生更改后 hexo g ，并将文件复制到 nginx 对应文件夹内。这样写好文章只 push 就 OK 了，爽歪歪。 已完成 将博客文件自动 push 到 github 。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初次比较完整地学习 vim]]></title>
    <url>%2F2017%2F11%2F19%2Ffirst-full-learn-vim%2F</url>
    <content type="text"><![CDATA[http://blog.ihipop.info/2011/01/2026.htmlhttp://www2.geog.ucl.ac.uk/~plewis/teaching/unix/vimtutorhttps://github.com/wjp2013/the_room_of_exercises/blob/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/vimtutor/30%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9Avim%E4%B9%8Bvimtutor(%E5%8F%8C%E8%AF%AD%E7%89%88).txthttps://blogs.gnome.org/raywang/2007/01/29/%E9%AB%98%E6%95%88%E7%8E%87%E7%BC%96%E8%BE%91%E5%99%A8-vim%EF%BC%8D%E6%93%8D%E4%BD%9C%E7%AF%87%EF%BC%8C%E9%9D%9E%E5%B8%B8%E9%80%82%E5%90%88-vim-%E6%96%B0%E6%89%8B/ 我认为 vim 的强大之处在于拥有多个命令，并且将命令组合起来使用，效率贼高。查看帮助 :help command ，下面是我在通过 vimtutor 学习过程中在其基础上根据命令分类的。 游标移动 向左、向右移动 n h、l ([number] motion) 向上、向下移动 n k、j ([number] motion) 向左上 h、k 到行首包含空格0 到行首不包含空格 ^ 到行尾 $ 到 n 个单词首 nw ([number] motion) 到游标所在单词尾 e 到文本首 gg 到最后一行首 G 进入插入模式 在游标前面添加 i 在游标后面添加 a 在游标所在行的前一行插入 O 在游标所在行的后一行 o 删除 删除游标所在字符 x 或 delete 删除跟游标移动相结合 只列举几个，触类旁通 删除左边 dh 删除右边 dl 删除到行首 d0 删除 x 个单词 dnw 或 ndw (d [number] motion) 恢复 一步一步恢复 u 直接恢复到初始 U 撤销恢复，与 u 产生的影响相对 ctrl + r 粘贴p 当前游标替换r 变更操作码类似删除命令，删除后并进入到插入模式 删除 n 个单词并定位到插入模式 cne (e [number] motion) 文件位置及状态ctrl + g 搜索文本 忽略大小写 :set ic 禁止忽略大小写 :set noic 最简单的搜索(文本首开始) / + 文本内容 最简单的搜索(文本末开始) ? + 文本内容 搜索结果下一个、上一个 n 、 N 返回到之前的位置 ctrl + o 继续到下一个 ctrl + i 括号匹配 % 替换 全局将 old 替换成 new :/old/new/g 执行外部命令 在当前窗口显示 pwd 目录文件下内容 :!ls 另存为 :w new_file.txt 删除另存为 :!rm new_file.txt 选择文本 选择文本存入新文件 按下 v ，调整游标，选择完成后按 : 出现 :’&lt;,’&gt; ，在其后输入w new_file1.txt 将外部文件或外部命令结果插入到当前文件 :r filename :r !ls 复制 选择文本复制 v -&gt; y 复制 n 单词 ynw (y [number] motion)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 Ubuntu 通过 nginx 配置 https]]></title>
    <url>%2F2017%2F11%2F02%2Fconfig-https-on-ubuntu-by-nginx%2F</url>
    <content type="text"><![CDATA[sudo nginx -s reload 由于微信小程序之前的服务器即将到期，现迁移服务器应用到一台 ubuntu 服务器，由于之前服务器是 centos ，迁移过程多少出现了些问题。以后用了 docker 就不会有这样的问题了吧，不过只是刚开始学 docker ，以后再弄吧。 环境centos12[root@VM_11_73_centos ~]# nginx -vnginx version: nginx/1.10.2 ubuntu12ubuntu@VM-214-51-ubuntu:~$ nginx -vnginx version: nginx/1.10.3 (Ubuntu) Centos nginx 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;# Load dynamic modules. See /usr/share/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events &#123; worker_connections 1024;&#125;http &#123; log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; proxy_pass http://127.0.0.1:8080; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125;# Settings for a TLS enabled server. server &#123; listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name _; root /usr/share/nginx/html; ssl_certificate "crt file path"; ssl_certificate_key "key file path"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; # ssl_ciphers HIGH:!aNULL:!MD5; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置 ssl_prefer_server_ciphers on; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; proxy_pass http://127.0.0.1:8080; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125;&#125; Ubuntu 默认配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384user www-data;worker_processes auto;pid /run/nginx.pid;events &#123; worker_connections 768; # multi_accept on;&#125;http &#123; ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; ## # SSL Settings ## ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## # Gzip Settings ## gzip on; gzip_disable "msie6"; # gzip_vary on; # gzip_proxied any; # gzip_comp_level 6; # gzip_buffers 16 8k; # gzip_http_version 1.1; # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*;&#125;#mail &#123;# # See sample authentication script at:# # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript## # auth_http localhost/auth.php;# # pop3_capabilities "TOP" "USER";# # imap_capabilities "IMAP4rev1" "UIDPLUS";## server &#123;# listen localhost:110;# protocol pop3;# proxy on;# &#125;## server &#123;# listen localhost:143;# protocol imap;# proxy on;# &#125;#&#125; 问题一将 server 节点复制到 /etc/nginx/nginx.conf 里，与 events 、 http 节点同级，执行 sudo nginx -t -c /etc/nginx/nginx.conf 报错，如下1234nginx: [alert] could not open error log file: open() "/var/log/nginx/error.log" failed (13: Permission denied)2017/11/02 19:07:12 [warn] 24890#24890: the "user" directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:12017/11/02 19:07:12 [emerg] 24890#24890: "server" directive is not allowed here in /etc/nginx/nginx.conf:5nginx: configuration file /etc/nginx/nginx.conf test failed 重点是 &quot;server&quot; directive is not allowed here in /etc/nginx/nginx.conf ，server 节点不允许配置在那里，很明显不能与 events 、 http 同级。 解决方案将 server 节点配置放到 http 节点下。123456789events &#123; ...&#125;http &#123; ... server &#123; ... &#125;&#125; 然后执行 nginx -t -c /etx/nginx/nginx.conf 仍然报错，这就有了问题二。 问题二执行 nginx -t -c /etc/nginx/nginx.conf 报错如下12nginx: [emerg] a duplicate default server for 0.0.0.0:80 in /etc/nginx/sites-enabled/default:17nginx: configuration file /etc/nginx/nginx.conf test failed 重点是 a duplicate default server for 0.0.0.0:80 ，对于 80 端口有两多个默认配置，意思就是你特妹的设置了两个监听 80 端口的 server 配置。于是看到了 http 节点下两句配置语句，意思是将这两处的配置也包含到主配置文件来，这样可能是模块化、配置分工更明确吧。12include /etc/nginx/conf.d/*.conf;include /etc/nginx/sites-enabled/*; 第一处查得无配置文件。第二处有一配置文件如下，确实有一个 80 端口配置，自己再配置一个 80 端口造成了冲突。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172server &#123; listen 80 default_server; listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don't use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; server_name _; location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; proxy_pass http://127.0.0.1:8080; &#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # include snippets/fastcgi-php.conf; # # # With php7.0-cgi alone: # fastcgi_pass 127.0.0.1:9000; # # With php7.0-fpm: # fastcgi_pass unix:/run/php/php7.0-fpm.sock; #&#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\.ht &#123; # deny all; #&#125;&#125;# Virtual Host configuration for example.com## You can move that to a different file under sites-available/ and symlink that# to sites-enabled/ to enable it.##server &#123;# listen 80;# listen [::]:80;## server_name example.com;## root /var/www/example.com;# index index.html;## location / &#123;# try_files $uri $uri/ =404;# &#125;#&#125; 解决方案两种方案，推荐第二种，感觉分工明确还是比较好的。 删除 include /etc/nginx/sites-enabled/*; 文件后在 /etc/nginx/nginx.conf 配置 80 内容 在 include /etc/nginx/sites-enabled/*; 配置要配置的内容。 执行 sudo nginx -t -c /etc/nginx/nginx.conf 出现输出下面内容说明配置成功。12nginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 将 nginx 配置生效sudo nginx -s reload 问题三配置完 端口代理（80-&gt;8080） 和 https 后，首页通过 https 可以正常访问 tomcat 首页，但是其他路径就会报 404 。 解决方案猜想 try_files 导致，注释之后就解决了。try_files /4.html /5.html @qwe; 问题四这是自己的部署的问题，本来的时候数据库跟应用服务器放在同一个服务器，由于 https ，配置数据库链接地址是服务器的域名，而不是 ip 地址，而新的服务器没有数据库，这就造成了下面的错误。&quot;Could not create connection to database server. Attempted reconnect 3 times. Giving up.&quot; 解决方案意思是 连接不上数据库，重新配置数据库地址后要重启 tomcat 。 参考 https://stackoverflow.com/questions/41766195/nginx-emerg-server-directive-is-not-allowed-herehttp://blog.csdn.net/number_chc/article/details/39340603https://www.shiyanlou.com/questions/8732https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-16-04http://xy.uyun.cn/post/80.html]]></content>
      <categories>
        <category>Https</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo -g Killed]]></title>
    <url>%2F2017%2F11%2F01%2Fhexo-g-killed-on-cloud-vps%2F</url>
    <content type="text"><![CDATA[hexo 生成静态文件时内存不足被杀死 交换分区交换分区（swap）是 Linux 虚拟内存分区，作用是在物理内存到达峰值时，将磁盘空间（swap）分区虚拟成内存分区使用，对用户看不可见。在内存小于 2G 时，交换分区为内存的 2 倍，超过 2G 时，交换分区为物理内存加上 2G ，当然也可以适当增大。交换分区为内存的 2 倍是一种以讹传讹的说法。如果交换分区的使用都超过 4GB 以上了，可想而知服务器的性能应该差很多了。创建分区两种方式，一种是交换分区，一种是交换文件。前者适用于一般装系统时选择交换分区，有空的硬盘分区，后者适用于已装完系统，没有空的硬盘分区。 问题hexo 生成的网站资源近 300 个，每次上传到服务器都很难受，并且多设备复制 hexo 文件贼麻烦，所以想通过 github 同步，然后各设备只需要安装 hexo ，尤其是通过 nvm 管理 nodejs 贼爽。将 hexo 资源下载到 vps ，不幸的是执行 hexo -g 会出现错误，如下123INFO Start processingINFO Files loaded in 1.2 sKilled 没有出现想想中的一长串的文件名，猜想内存不够执行被中断。查看 Killed 日志dmesg | egrep -i -B100 &#39;killed process&#39; 或:egrep -i &#39;killed process&#39; /var/log/messagesegrep -i -r &#39;killed process&#39; /var/log 或:journalctl -xb | egrep -i &#39;killed process&#39; 解决方案 内存不足，创建交互空间即可。https://cloud.tencent.com/document/product/362/3597 查看系统当前的分区情况 free -m 或 swapon -s 创建用于交换分区的文件，bs=4096 为一块区域字节数是 4096 ，count 为区域数 dd if=/dev/zero of=/swap bs=4096 count=1572864 调整交换分区文件权限 chmod 600 /swapfile 设置交换分区文件 mkswap /swap 启用交换分区文件 swapon /swap 若要想使开机时自启用，则需修改文件 /etc/fstab 中的 swap 行 echo “LABEL=SWAP-sda /swap swap swap defaults 0 0” &gt;&gt; /etc/fstab 删除swap swapoff /swap ; rm -f /Application/swap 执行 dd if=/dev/zero of=/swap bs=4096 count=1572864 时需稍等一会，等待完成即可。执行完上面就会在根目录建立 swap 文件作为交换分区，然后就能开开心心在 vps 用 hexo -g 了。对于云服务器重装可能不会保留分区文件，所以到时还需重新配置。 参考http://www.cnblogs.com/owenyang/p/4282283.htmlhttps://www.oyohyee.com/post/Note/VPS_gengrator.htmlhttp://blog.csdn.net/sunstars2009918/article/details/7274602https://my.oschina.net/sukai/blog/654712]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>centos</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在 Ubuntu 通过 nvm 安装 nodejs]]></title>
    <url>%2F2017%2F10%2F30%2Finstall-nodejs-on-ubuntu-by-nvm%2F</url>
    <content type="text"><![CDATA[通过 nvm 管理 nodejs 贼鸡儿爽 安装 nvmnvm 是一个开源的 Node 版本管理器，通过简单的 bash 脚本来管理、切换多个 Node.js 版本,使用 nvm 可以安装官网最新版本之前的任意版本,可以任意切换不同版本，十分方便。 下载并安装wget https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash insatll.sh 查看版本nvm -v 更改 nvm 镜像设置 export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node查询结果 echo $NVM_NODEJS_ORG_MIRROR 安装 nodejs可以通过 nvm ls-remote 查看可安装版本执行 nvm install 6.0.0 安装会出现下面内容，也可以验证淘宝镜像是否配置正确12Downloading and installing node v6.0.0...Downloading https://npm.taobao.org/mirrors/node/v6.0.0/node-v6.0.0-linux-x64.tar.xz... 使用 node通过 nvm install 6.0.0 完成安装后默认就能用 node 啦，不过在下载了多个版本时可以用 nvm use 版本号 来随意切换版本。 配置 npm 镜像在安装模块时，可以通过下面两种方式配置。 临时使用npm --registry https://registry.npm.taobao.org install express 永久使用npm config set registry https://registry.npm.taobao.org 尽情使用吧]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改 Ubuntu 计算机名]]></title>
    <url>%2F2017%2F10%2F30%2Fchange-ubuntu-computer-name%2F</url>
    <content type="text"><![CDATA[sudo vi /etc/hostname 查看计算机名称 windows ctrl + alt + t 打开终端，”@”后为主机名 终端输入 hostname 或 uname -n ，查看主机名 修改临时计算机名终端下输入 sudo hostname Ubuntu-Temp终端”@”后不会立即显示，但是用 hostname 查看或重新打开一个终端会生效，这种方法只能临时修改计算机名，重启计算机将恢复，但是登出用户不会失效。 修改永久计算机名计算机名存放在 /etc/hostname 通过 sudo vi /etc/hostname 编辑器修改完保存即可，Ubuntu 自带的 vi 是不完整的，可能一直是输入命令模式，可以通过 sudo apt-get install vim 更新 vim 。 修改完名的坑执行 sudo 命令时，可能会提示 sudo: 无法解析主机：Kiuber-Ubuntu原因是 sudo 其实是访问 /etc/hosts 127.0.0.1 的值，平时一般省略了，查看 hosts 文件发现还是之前计算机名，但是 hosts 文件修改需要用到 sudo ，果断查看 sudo 用法，果真有带 host 参数的命令。执行 sudo -h 原计算机名 vim /etc/hosts 改为新计算机名，保存之后以后再用 sudo 又可以开心的省略 host 了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>hostname</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓7.0内容提供者变化]]></title>
    <url>%2F2017%2F10%2F26%2Fandroid-n-file-provider%2F</url>
    <content type="text"><![CDATA[android.content.pm.ProviderInfo.loadXmlMetaData(android.content.pm.PackageManager, java.lang.String)’ on a null object reference 背景从 Android7.0 (N) 起，程序之间不允许通过 Intent 传文件(file://URI)，图片选取、裁剪类功能将受影响。 7.0以前调用相机拍照1234567File file = new File(Environment.getExternalStorageDirectory(), "/temp/photos/" + System.currentTimeMillis() + ".jpg");if (!file.getParentFile().exists()) file.getParentFile().mkdirs();Uri imageUri = Uri.fromFile(file);Intent intent = new Intent();intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);startActivityForResult(intent, 1127); 最近一个项目用到图片选择器，选择图片的时候显示相机，用的这个第三方库 GalleryPick ，此库为了兼容7.0，需要配置 Provider ，如果没配置打开相机动作时就会报错，7.0以前及7.0错误如下 7.0 以前 7.0 解决方法在清单文件配置内容提供者123456789 &lt;provider android:name="android.support.v4.content.FileProvider" android:authorities="xxx.xxx.xxx.xxx" android:exported="false" android:grantUriPermissions="true"&gt; &lt;meta-data android:name="android.support.FILE_PROVIDER_PATHS" android:resource="@xml/file_paths" /&gt;&lt;/provider&gt; authorities 值为在 GalleryConfig Builder 配置 provider 值。 多个相同内容提供者关于存储方面的有很多功能，例如下载文件、访问图片、上传图片等，兼容安卓7.0的话就需要设置内容提供者，所以这个问题也是比较常见的。 12Error:Execution failed for task ':app:processDebugManifest'.&gt; Manifest merger failed with multiple errors, see logs 当集成多个相同内容提供者时，比如小米自动更新、 GalleryPick ， Android Studio 构建时会提示清单文件合并错误。 小米自动更新 Provider authorities 是固定的，如下 DownloadInstallManager.java 123456789Uri installUri;if (Client.isLaterThanN()) &#123; File file = new File(apkFilePath); String authority = mContext.getPackageName() + ".selfupdate.fileprovider"; installUri = FileProvider.getUriForFile(mContext, authority, file); mContext.grantUriPermission("com.google.android.packageinstaller",installUri,Intent.FLAG_GRANT_READ_URI_PERMISSION);&#125; else &#123; installUri = Uri.parse("file://" + apkFilePath);&#125; 当然可以搞出源码改为传参形式，但是不能每次升级小米自动更新 SDK 版本的时候都改一次吧，当然也可以继承 FileProvider ，在清单文件提供者 name 写继承的 类名。 项目还集成了选择图片库，没办法先让它将就下也用小米自动更新的 authorities 吧，要不然就会造成上面清单文件冲突。 resource 可以只配置图片选择库的 @xml/file_paths ，不过要与小米自动更新的文件名一样。 当然也可以同时配置到一个文件里，如下 123456789101112131415161718192021&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;resources&gt; &lt;paths&gt; &lt;!--XiaoMi Update Path--&gt; &lt;paths&gt; &lt;external-files-path name="download" path="Download"/&gt; &lt;/paths&gt; &lt;!--GalleryPick Path--&gt; &lt;external-path name="external" path=""/&gt; &lt;files-path name="files" path=""/&gt; &lt;cache-path name="cache" path=""/&gt; &lt;/paths&gt;&lt;/resources&gt;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Provider</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[提高安卓应用识别二维码准确率，zbar识别图片文件]]></title>
    <url>%2F2017%2F07%2F06%2Fimprove-android-parse-qrc%2F</url>
    <content type="text"><![CDATA[利用zbar提高二维码识别率 前言相信用过微信的都知道微信的二维码识别识别特别快，无论是斜着手机还是怎样，几乎都能很快的识别出来，听说微信是开发了一套自用的二维码识别库，Qbar，这个算法应该是放到了微信服务器，因为在聊天界面长按包含二维码的图片，只有手机接入网络时才会有“识别图中二维码”这一选项，再就是扫一扫需要网络才能用，不过接入网络有可能是微信为了统计扫码次数。 对比了几个安卓二维码扫描的应用，小米自带的扫一扫、UC浏览器不需要网络就可以本地识别，支付宝、微信这两家需要网络才行。 zxing zbar安卓二维码相关的基础库有两个，一个是googlezxing，另一个是zbar，zxing一直在维护，而zbar已经不维护多年了，不过zxing是用java写的、而zbar底层是用c写的，听网上说zbar常用于ios开发，貌似现在ios提供了自己的识别二维码接口，Android方面的文档几乎没有。 识别二维码一般分为两类，一是用相机来扫一扫，二是读取文件识别。不过两者有共同的地方，不论是扫一扫还是识别文件都可以转化为Bitmap（阅读Zbar源码可以发现）。 经过我手机（红米Note 4G双卡版、小米5S Plus 高配版）测试，zxing的扫一扫和识别文件效果一般般，对于稍微有点复杂的二维码表现的就更差了。于是寻求zbar的解决方案。阅读zbar关键源码，识别Bitmap时， 123456789101112131415161718192021public void onPreviewFrame(byte[] data, Camera camera) &#123; Camera.Parameters parameters = camera.getParameters(); Size size = parameters.getPreviewSize(); Image barcode = new Image(size.width, size.height, "Y800"); barcode.setData(data); int result = scanner.scanImage(barcode); if (result != 0) &#123; previewing = false; mCamera.setPreviewCallback(null); mCamera.stopPreview(); SymbolSet syms = scanner.getResults(); for (Symbol sym : syms) &#123; scanText.setText("barcode result " + sym.getData()); barcodeScanned = true; &#125; &#125; &#125; 查其重载barcode.setData有两个，于是可以把图片文件转换成两个参数就能识别了，其实扫一扫的原理也是这样的，相机把捕捉的Bitmap data[]传过来然后识别。 123public native void setData(byte[] var1);public native void setData(int[] var1); 优化方案下面就是指定图片识别代码，zbar的扫一扫很多，这里就不说了 123456789101112131415161718192021private String zbarDecode(String filePath) throws Exception &#123; File file = new File(filePath); Bitmap barcodeBmp = BitmapFactory.decodeFile(file.getPath()); int width = barcodeBmp.getWidth(); int height = barcodeBmp.getHeight(); int[] pixels = new int[width * height]; barcodeBmp.getPixels(pixels, 0, width, 0, 0, width, height); Image barcode = new Image(width, height, "RGB4"); barcode.setData(pixels); ImageScanner reader = new ImageScanner(); int result = reader.scanImage(barcode.convert("Y800")); String qrCodeString = null; if (result != 0) &#123; SymbolSet syms = reader.getResults(); for (Symbol sym : syms) &#123; qrCodeString = sym.getData(); LogUtil.d("qrCodeString", qrCodeString); &#125; &#125; return qrCodeString; &#125; 参考链接https://github.com/ZBar/ZBar/blob/master/android/examples/CameraTest/src/net/sourceforge/zbar/android/CameraTest/CameraTestActivity.javahttps://stackoverflow.com/questions/17850942/zbar-android-scan-local-qr-or-bar-code-image]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Samba的简单使用]]></title>
    <url>%2F2017%2F05%2F10%2Flinux-first-use-smb%2F</url>
    <content type="text"><![CDATA[Samba是在Linux和UNIX系统上实现的SMB协议的一个免费软件，由服务器和客户端程序构成，简称smb。 跟FTP差不多，smb也是实现文件传输的。 环境Red Hat Enterprise Linux 5 安装检查是否安装12345[root@localhost ~]# rpm -qa|grep sambasamba-common-3.0.33-3.14.el5samba-3.0.33-3.14.el5samba-swat-3.0.33-3.14.el5samba-client-3.0.33-3.14.el5 如果显示为上面内容，代表samba已经安装。 安装rpm下载对应的安装包，然后安装。。平时一般都是用的centos，有空研究下red hat 的，只是学校机房电脑已经安装好了，所以我就省事了。 运行控制开始、停止、重启、重新加载，smb.conf更改后要重启smb。 在windows文件管理器地址输入”\\Linux ip地址”，若果访问不到的话，看一下防火墙及SeLinux。 1service smb start|stop|restart|reload 开机自启动 1chkconfig --leave 345 smb on|off 匿名文件共享123456[public] comment = Public share directory path = /user/share/mydoc public = yes writable = yes guest ok = yes 非匿名文件共享 创建Linux用户useradd smb1 设置Linux密码passwd kiuber 把Linux用户添加到smb用户smbpasswd -a smb1 配置smb.conf 1234567[user] comment = Public share directory path = /user/share/mydoc valid user = smb1 public = no writable = yes guest ok = no 验证smb并重启smb 12testparm -vservice smb restart ​ ​]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Samba</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则复习]]></title>
    <url>%2F2017%2F04%2F12%2Fjava-regex%2F</url>
    <content type="text"><![CDATA[JAVA-pattern 正则表达式实例java.util.regex常用的三个类： Pattern：pattern是正则表达式的表示，Pattern没有公共构造方法，要想创建一个Pattern对象需要调用其公共静态编译方法。 Pattern pattern = Pattern.comoile(String regex) Matcher：Matcher是对输入的字符串进行解释及匹配，与Pattern类一样没有公共构造方法，需要调用Pattern对象的matcher方法来获得一个Matcher对象，参数为待匹配字符。 PatternSyntaxException：PatternSyntaxException是一个非强制异常类，表示正则表达式的语法错误。 123456789public static void main(String[] args) &#123; String regex = ".*Kiuber.*"; Pattern pattern = Pattern.compile(regex); String input = "i am Kiuber hello"; Matcher matcher = pattern.matcher(input); System.out.println("是否匹配：" + matcher.matches()); boolean matches = Pattern.matches(regex, input); System.out.println("是否匹配：" + matches); &#125; 捕获组（分组）捕获组是把多个字符当一个单独的单元处理，通过括号分别分组。 例如，正则表达式(dog)创建了一个单一分组，这个分组包含”d”,”o”,”g”。 捕获组是通过从左到右计算器开括号来编号的。 例如（（A）（B（C））），共分为四个组。 （（A）（B（C））） （A） （B（C）） （C） 可以调用matcher对象的groupCount方法查看表达式共有多少个分组 特殊：group(0)，代表整个表达式，该组不在groupCount返回值中。 12345678public static void main(String[] args) &#123; // A零次或一次 B零次或多次 C一次或多次 String regex = "(A?(B*(C+)))"; Pattern pattern = Pattern.compile(regex); Matcher matcher = pattern1.matcher(""); int i = matcher.groupCount(); System.out.println("组个数：" + i); &#125; 输出”组个数：3” 正则表达式语法 字符 说明 \ 将其后字符标记为特殊字符，如”\n”匹配换行符，”\\”匹配”\”，”\(“匹配”(“。 ^ shift+6 标记字符串起始。 $ shift+4 标记字符串结束。 * shift+8 零次或多次匹配前面的字符或子表达式，如”zo“匹配”z”和”zoo”，\等于{0,} + shift+= 一次或多次匹配前面的字符或子表达式，如”zo+”匹配”zo”和”zoo”，但是与”z”不匹配，+等于{1,} ? shift+/ 零次或一次匹配前面的字符或子表达式，如”do(es)”匹配”do”和”does”，?等于{0,1} {n} n是非负整数，表示其前面的字符或子表达式正好匹配n次，如”o{2}”与”Bob”不匹配，但与”food”匹配 {n,} n是非负整数，表示至少匹配n次，如”o{2}”与”Bob”不匹配，但与”fooooood”匹配，当n=0时相当于”*”，n=1时相当于”+” {n,m} n和m都为非负整数，其中n&lt;=m，至少匹配n次，至多匹配m次 ? 当此字符紧随任何其他限定符（*、+、?、{*n*}、{n,}、{n,m}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。 . 匹配除”\r\n”之外的任何单个字符，若要匹配的包括”\r\n”，使用[\s\S]。 (pattern) (?:pattern) (?=pattern) (?!pattern) x\ y 匹配x或y，”z\ food”匹配”z”或”food”，”(z\ f)ood”匹配”zood”或”food” [xyz] 字符集。匹配中括号中的任一字符，如”[abr]”匹配”Kiuber”中的”r” [^xyz] 反向字符集。匹配未包含的任何字符，如”[^abr]“匹配”Kiuber”中的”K”，”i”，”u”，”b”，”e” [a-z] 字符范围]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序访问httpsAPI]]></title>
    <url>%2F2017%2F03%2F27%2Fwechat-app-https%2F</url>
    <content type="text"><![CDATA[微信小程序在用户体验及用户信息安全方面确实做足了工作。 微信公众平台官网关于小程序介绍中，有一个单独的板块“设计”，这个板块是专门统一用户体验的，包含了一些字体大小、图标大小、topbar的信息等。 安全方面微信API中明确说明开发者不能随便获取用户信息或者利用漏洞获取信息。而且小程序只能请求在公众平台配置的域名。域名不能写子域名、端口号而且必须是https，但是在实际的开发中小程序是能对不同端口号访问的，但是不能对子域名访问可能是申请https证书的时候就是唯一的域名。 申请免费https证书我之前买的一个域名是在阿里云买的，当然腾讯也有免费的证书服务，在阿里云购买证书的话阿里云会自动将证书解析添加到解析面板。 阿里云控制台–&gt;安全（云盾）–&gt;证书服务–&gt;购买证书选择 免费型DV SSL ，然后去支付0.00元。。然后去证书服务控制台补全信息就行了~是不是很简单啊。 配置证书证书服务下载证书中详细的不同的应用服务器配置文档。有一个坑是 官方配置中密钥路径是不完全的，在实际密钥配置中要填写密钥全路径。配置完成及得重启。重启后tomcat第一次启动可能会特别慢，浏览器一直处于与服务器连接状态也不会拒绝访问，等第一次请求完成后，以后刷新浏览器直接相应到，本以为是网络原因但是nginx重启后能接着访问，就排除了网络原因。 实际上是tomcat在第一次启动时调用jvm的产生随机数,jvm是调用/dev/random产生随机数，这个/dev/random会返回小雨熵池噪声总数的随机字节，是同步阻塞式方法，假如熵池噪声数为空或者不够，tomcat就会一直卡在产生SessionID地方，自然而然卡住，直到产生足够的随机字节才能正常使用。 /dev/random是同步阻塞式。/dev/urandom或/dev/./urandom是异步非阻塞式 可以通过更改tomcat的catalina.sh中加入这么一行：-Djava.security.egd=file:/dev/./urandom或/dev/urandom，更改java中的random方法，/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-0.b13.el7_3.x86_64/jre/lib/security/java.security中的securerandom.source=file:/dev/random改为/dev/./urandom或/dev/urandom，还有一种是增大噪音数。 贴一下自己tomcat的https配置部分。通过yum安装的tomcat的安装路径为/usr/share/tomcat，配置文件路径在/etc/tomcat，server.xml也在其中。12345678910&lt;Connector port=&quot;8443&quot;protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot;keystoreFile=&quot;/etc/tomcat/cert/your-name.jks&quot;keystorePass=&quot;214055589090202&quot;maxThreads=&quot;150&quot;SSLEnabled=&quot;true&quot;scheme=&quot;https&quot;secure=&quot;true&quot;clientAuth=&quot;false&quot;sslProtocol=&quot;TLS&quot; /&gt; 配置完成端口问题正在学习，直接修改server.xml中配置端口号怎么修改都不行。修改重启完就拒绝访问了。 小程序访问服务器考虑到WEB服务API可能会变化，所以把API地址放到了Bmob云逻辑里，这样小程序先获取BmobAPI地址然后再实现业务逻辑，这样就实现了不用更新小程序就可以发布最新的API地址，也可以做一个固定的API地址来存放其他变化的API地址。123456789101112wx.request(&#123; url: address, header: &#123; // "Content-Type":"application/json" &#125;, success: function (res) &#123; console.log("服务器测试数据：" + res.data) &#125;, fail: function (err) &#123; console.log(err) &#125; &#125;)]]></content>
      <categories>
        <category>Wechat App</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓Socket编程]]></title>
    <url>%2F2017%2F03%2F23%2Fandroid-socket%2F</url>
    <content type="text"><![CDATA[Socke基础 Socket常识称为套接字，用于IP地址和端口。端口号取值范围0-256256-1（0-1024位系统保留端口）我们通常使用1024-256256-1端口号Socket分为两部分一是服务器部分，一直监听服务器某个端口。二是客户端部分，可以向服务器发送数据。 Socket分为通常分为TCP、UDPUDP协议UDP协议是一个不怎么靠谱的协议，把数据打成数据包，数据包包含通讯地址，数据包是否发送到指定服务器是不会被保证的，数据包发送的数据包比较小，速度相对于TCP快些。 TCP协议客户端与服务器建立连接需要进行三次握手，建立连接之后服务器与客户端就能随意发送数据。 客户端于服务器端要用同一种协议（UDP或TCP）。客户端向服务器发送数据为OutputStream客户端接受服务器发送的数据为InputStream 服务器端（ServerSocket）1.创建一个ServerSocket2.调用accept()用来接收客户端发送请求3.从接收到的socket对象得到客户端发送的数据 Android Socket通信原理，注意地方：1、中间的管道连接是通过InputStream/OutputStream流实现的2、一旦管理建立起来可以进行通信3、关闭管道的同时意味着关闭Socket4、当对同一个Socket创建重复管道时会异常5、通信过程中顺序很重要：服务器端首先得到输入流，然后将输入流信息输出到其各个客户端；客户端先建立连接后先写入输出流，然后再获得输入流，不然会有EOFException的异常。 基于TCP协议服务器端 1234567891011121314151617181920212223242526272829303132ServerSocket serverSocket = null; try &#123; // 创建一个ServerSocket对象，并让这个socket监听4567端口 serverSocket = new ServerSocket(4567); // 接受客户端所发送的请求（阻塞式） 返回值为从客户端发送得到的 Socket socket = serverSocket.accept(); // 读取客户端发送的InputStream InputStream inputStream = socket.getInputStream(); byte[] buffer = new byte[1024]; int tmp = 0; // 从ImputStream读取客户端发送的数据 while ((tmp = inputStream.read(buffer)) != -1) &#123; System.out.println(&quot;Client--&gt;&quot; + new String(buffer, 0, tmp)); InetAddress address = socket.getInetAddress(); String ip = address.getHostAddress(); OutputStream outputStream = socket.getOutputStream(); System.out.println(ip); outputStream.write(ip.getBytes()); outputStream.flush(); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; serverSocket.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; 客户端与服务器建立连接 123456789101112131415161718192021222324252627282930313233343536 try &#123; // 创建一个Socket对象 指定服务器ip地址和端口号 socket = new Socket(String.valueOf(params[0]), (Integer) params[1]); // 从socket得到OutputStream OutputStream outputStream = socket.getOutputStream(); outputStream.write(&quot;= = = = = = = = 建立连接= = = = = = = =&quot;.getBytes()); outputStream.flush(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; 客户端发送数据到服务器 if (socket != null &amp;&amp; !socket.isClosed() &amp;&amp; socket.isConnected()) &#123; new Thread() &#123; @Override public void run() &#123; try &#123; OutputStream outputStream = socket.getOutputStream(); String time = SocketActivity.this.format.format(new Date()); String out = &quot;= = = = = = = = &quot; + time + &quot;= = = = = = = =&quot;; outputStream.write(out.getBytes()); outputStream.flush(); InputStream inputStream = socket.getInputStream(); byte[] bb = new byte[1024]; int len = 0; while ((len = inputStream.read(bb)) != -1) &#123;// System.out.println(&quot;服务器返回的数据--&gt;&quot; + new String(bb, 0, len)); Log.d(TAG, &quot;run: &quot; + &quot;服务器返回的数据--&gt;&quot; + new String(bb, 0, len)); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;.start(); &#125; 基于UDP服务器端1234567891011121314try &#123; // 创建一个DatagramSocket对象，并指定监听端口号 DatagramSocket socket = new DatagramSocket(4567); byte[] data = new byte[1024]; // 创建一个空的DatagramPacket对象 用来接收客户端发送的数据包 DatagramPacket packet = new DatagramPacket(data, data.length); // 使用receive方法接收客户端所发送的数据 同样是堵塞的方法 不会向下运行 socket.receive(packet); System.out.println(new String(packet.getData())); &#125; catch (SocketException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; 客户端 123456789101112131415Date date = new Date(); String time = SocketActivity.this.format.format(date); DatagramSocket socket = null; try &#123; if (socket != null) &#123; socket.close(); &#125; // 创建一个DatagramSocket对象 socket = new DatagramSocket(4567); //创建一个InetAddree InetAddress address = InetAddress.getByName((String) params[0]); // 创建一个DatagramPacket对象，并指定服务器地址及端口号 DatagramPacket packet = new DatagramPacket(time.getBytes(), time.getBytes().length, address, 4567); // 调用socket对象的send方法 发送数据到服务器 socket.send(packet);]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA-WEB之Servlet]]></title>
    <url>%2F2017%2F03%2F21%2Fjava-web-servlet%2F</url>
    <content type="text"><![CDATA[Java Servlet，是用Java编写的服务器端程序。 其主要功能在于交互式地浏览和修改数据，生成动态Web内容。 再学Servlet之前先了解基础的服务器相关。。 Tomcat目录结构/bin 存放各种平台下用于启动和停止服务器命令文件 （startup.bat开启服务器，shutdown.bat关闭）/config 存放各种配置文件/lib 存放服务器所需的JAR文件/logs 没啥好说的/temp 临时文件/webapps 要发布的应用文件夹/work 存放根据Servlet生成的字节码文件。 WEB-INF目录1.客户端无法访问其内部文件2.web.xml为项目配置文件3.classes文件夹用于放置*.class文件4.lib文件夹用户存放jar包 Tomcat容器等级Tomcat的容器分为四个等级，Servlet的容器管理Context容器，一个Context对应一个Web工程。 –&gt;ContextTomcat–&gt;Container容器–&gt;Engine–&gt;HOST–&gt;Servlet容器 –&gt;Context ServletServlet（Server Applet），全称Java Servlet，是用Java编写的服务器端程序。 其主要功能在于交互式地浏览和修改数据，生成动态Web内容。 Servlet生命周期Servlet 通过调用 init () 方法进行初始化。Servlet 调用 service() 方法来处理客户端的请求。Servlet 通过调用 destroy() 方法终止（结束）。最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。 Servlet简单使用1.新建一个HelloServlet类继承HttpServlet2.重写doGet()或者doPost()方法3.在web.xml中注册Servlet4.在jsp中写一个访问servlet的超链接 在一个请求当中，实际流程是 网页servlet别名–&gt;web.xml中的–&gt;访问中的中的也就是说假如前端是POST请求，查看网页源码可以看到ACTION的路径，但是这个路径一般不与类名相同，可以避免一些安全问题。 当然在工程右键直接新建一个Servlet，像MyEclipse这样的工具直接帮你写好web.xml的配置。 Tomcat装载Servlet的三种情况1.在web.xml中注册的。 在节点下添加1，中间数字越小优先级别越高。2.在Servlet容器启动后，客户端首次向其发送请求。3.Servlet类文件被更新后，将重新装载Servlet。 注：当Servlet容器把Servlet实例加载后将创建Servlet实例并调用init()方法，在整个Servlet整个生命周期内，init()方法只被调用一次且Servlet实例是常驻于内存的。 当第一次请求Servlet时：Servlet容器实例化Servlet之后是–&gt;构造方法–&gt;init()–&gt;doGet()或doPsost() 当服务器停止工作时执行onDestroy()方法。 当在web.xml中配置loadon-startup时先执行数字小的Servlet，并且也是先执行构造方法然后执行初始化方法。 当项目已经部署到服务器且服务器正常工作时修改源码会自动编译并且自动装载Servlet。 JSP九大内置对象与Servlet JSP对象 Servlet out resp.getWrite request service方法中的req参数 response service方法中的resp参数 session req.getSession()方法 application getServletContext()方法 exception Throwable page this pageContext PageContext Config getServletConfig()方法 Servlet路径跳转绝对路径：放之四海而皆准的路径相对路径：相对于当前资源的路径 1.jsp跳转到Servlet相对路径：下面第一个斜线是指服务器根目录，但是在必须以斜线开头访问HelloServlet绝对路径：path变量代表的是项目的根目录 2.Servlet跳转到JSP请求重定向方式跳转到test.jsp，当前路径是ServletPathDirection/servletresponse.sendRedirect(resquest.getContextPath() + “/test.jsp”);服务器内部跳转,斜线代表项目根目录request.getRequestDispatcher(“/test.jsp”).forward(request,response);]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos 7 安装图形化界面并实现远程控制]]></title>
    <url>%2F2017%2F03%2F13%2Fcentos-desktop%2F</url>
    <content type="text"><![CDATA[使用teamviewer远程服务器 安装图形化界面 安装环境 yum groups install &quot;MATE Desktop&quot; 安装好MATE Desktop后，再安装X Window System,最好等待上一步安装完成后再执行这一步。 yum groups install &quot;X Window System&quot; ​ 设置默认通过桌面环境启动服务器 systemctl set-default graphical.target 重启一下服务器然后登陆服务器运营商在线网页就能看到图形化界面了。 reboot ​ 安装teamviewer 下载安装包 方法一：从官网下载安装包rpm安装包，然后传到服务器。 方法二：`wget https://download.teamviewer.com/download/teamviewer.i686.rpm 使用yum安装 yum install 包路径 开启teamviewer ​ 在网页上打开teamviewer，第一次打开会有个协议需要接受，所以在命令行打不开。如果不把图形化界面设置为默认启动方式，关闭网页后teamviewer自动关闭连接。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>远程连接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序开发小记]]></title>
    <url>%2F2017%2F03%2F12%2Fwechat-app%2F</url>
    <content type="text"><![CDATA[微信小程序开发小记 小程序从注册到上线确实是很严格，感觉小程序并不是很火，可能是相比小程序App用的比较多，小程序的出发点是发展线下推广，即扫即用，所以就目前API来说 不能分享到微信朋友圈，而且打开小程序不能通过长按二维码图片进入，比较好的线上宣传方式就是小程序右上角的分享了，分享到朋友或微信群其他人就可以直接点击进入。 这里就不说基本的东西，基本的语法什么的可以去看公众平台，大部分是js跟css的东西。 下面就说下遇到的坑还有一些经验吧。 写好的页面要在app.json中注册，app.json就相当于Android中的Manifest.xml文件，管着整个应用的。 某文件父文件夹有几个就写几个”../“可以退到对应文件夹。 在外层声明var that = this;可以在内层间接获取到this的数据。 页面中控件位置可以用css来控制，所以css要学好。 适当运用data-key这个属性，可以在wx.perview时用到。 小程序不能分享到朋友圈也不能长按二维码图片进入。 小程序不支持http访问，而且访问公网的网站必须要在小程序官网配置上。 小程序审核时间在两天左右，周六周天不审核，感觉审核门槛还不算特别高。 待补充~]]></content>
      <categories>
        <category>Wechat App</category>
      </categories>
      <tags>
        <tag>山东微拼</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给自己开发小功能]]></title>
    <url>%2F2016%2F12%2F18%2Ffunction-for-me%2F</url>
    <content type="text"><![CDATA[作为自己用、也作为本学期Web、Css结课一个设计吧。 说说功能类似qq空间说说，手机上发布动态、Web查看（服务器用PHP返回数据），数据存在Bmob。 个人首页用Web、Css知识做了一个个人首页，还需要完善。 图库手机上可以发布图片，Web查看（同样也是用PHP返回数据）,数据存在Bmob。]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扒拉扒拉爱壁纸的图片资源]]></title>
    <url>%2F2016%2F12%2F18%2Faibizhi-source%2F</url>
    <content type="text"><![CDATA[是时候表演真正的技术了 =……= 站点背景图是用的国外的unsplash，有的时候显示比较慢，所以想搞一个国内的。 去网上搜了下高清壁纸的，基本都是国外的，对比了下觉得这个觉得还可以，主要是图片质量与访问速度还算可以接受，于是用php写了对应的正则，爬取图片直链，在服务器上试了试下载时间，不怎么稳定，有的时候下载时间大概在15s左右！我接受不了！贴下php代码（新手）。 1234567891011121314151617&lt;?php$filename="https://alpha.wallhaven.cc/wallpaper/200000";$subject=file_get_contents($filename);$pattern = '&lt;img id="wallpaper" src="(.*)" alt=".*"/&gt;';if (preg_match_all($pattern,$subject,$matches)) &#123; $img_url = "http:".$matches[1][0]; echo $img_url; $data = file_get_contents($img_url); date_default_timezone_set("UTC"); $time = date('Y-m-d H:i:s',time()); $pic_num = strrpos($img_url, "/"); $filename = "wallhaven.cc".$time.substr($img_url, $pic_num+1); file_put_contents($filename, $data);&#125;?&gt; 最开始用爱壁纸的时候是高中，平时装系统也比较多，突然闲情雅致才会装个爱壁纸，不得不说爱壁纸里面图确实可以，图片质量与图片种类都还可以。 高中的时候弄过电脑截包，记得还得安装这个安装那个的，比较麻烦，碰到这种情况，想实现一个功能在一个平台需要弄很多东西可以换个平台试试，我确实喜欢Linux安装软件姿势，大部分软件依赖都有，没有的自己加上依赖就可以（不过我还没试），像Centos直接yum install xxx就可以，很快速的打几个字母的事情，软件就安装好了。 爱壁纸确实有Linux版的，不过高中的时候在手机上用过一个很好用的截包软件，想不起来叫什么名字了，网盘肯定也有，不过找的话肯定是有难度。然后去谷歌了下，很简单就找了Packet Capture下面也有汉化版的。 下面开始干活，昨晚这个时候已经是晚上1点了，对象刚回到家不一会，截包的时候对象也在给我发消息，列表中的包刷刷的过 = . =，截取之后停止截包就不会刷新了。 最终是要的高清图片直链，所以在停止截包之前我就下载了几张图片，一会分析的时候可以根据包的大小来确定下载是哪个包，当然也可以根据时间线确定。 先来几张截包图（不经常上qq，传文件也比较麻烦，等买个树莓派搭建个常年开机的本地磁盘） 从第一张图上可以根据包的大小或者时间来确定刚才下载图片的操作。 从二、三张图片上可以看到包的详情，将GET后的链接放到HOST上组起来就是新的网址，也可以看到响应头中的Content_Type确定哪种是我们需要的。刚才组起来的新网址就是我需要的，可以猜到第一长串数字是图片对应的编号，第二三长串就是图片的宽高。 至此爱壁纸的图片直链就搞到手了。截取到的包分析分析也挺有意思的，也可以看到CDN是用的哪家的，看看大公司他们对CDN的选取，对应CDN的ip是多少等等。]]></content>
      <categories>
        <category>瞎搞</category>
      </categories>
      <tags>
        <tag>爱壁纸</tag>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel常用功能]]></title>
    <url>%2F2016%2F10%2F25%2Foften-excel%2F</url>
    <content type="text"><![CDATA[对于复杂数据常用的Excel小功能。 –&gt;环境：Office2016 Excel常用来做一些统计，咱们就根据需求进行函数介绍。 需求一老师统计了一些平时不做作业，上课不认真听讲的同学名单，想看下他们的上学期的成绩。 最简单的就是按照名字一个个复制，名字多的时候就有点尴尬了。 姓名 不认真 张三、李四、王五、赵六、孙七 成绩表 姓名 成绩 张三 61 王二麻子 88 李四 60.2 赵六 60.9 王五 60.2 孙七 60.1 最终结果 姓名 成绩 张三 61 李四 60.1 王五 60.2 赵六 60.2 孙七 60.9 实现先将一个单元格内容分成多个单元格，然后将多个横排的单元格转换成竖排的，最后根据名字去成绩表中查找对应的成绩。 选中名字单元格–&gt;数据–&gt;数据工具–&gt;分列 选中分列后的多个单元格右键–&gt;粘贴–&gt;转置 用VLOOKUP（纵向查找函数）进行查找，参数分别为lookup_value、table_array、col_index_num、[range_lookup] 姓名 成绩 张三 =VLOOKUP(A2,D$1:E$7,2,FALSE) 李四 =VLOOKUP(A3,D$1:E$7,2,FALSE) 王五 =VLOOKUP(A4,D$1:E$7,2,FALSE) 赵六 =VLOOKUP(A5,D$1:E$7,2,FALSE) 孙七 =VLOOKUP(A6,D$1:E$7,2,FALSE) 一定不要忘记在table_array区域填”$”对数据区域进行绝对引用。 需求二根据旷课记录表查看以下表中的人是否有旷课记录。 姓名 是否旷课 张三 是 李四 是 孙七 否 旷课表 信息与艺术设计系旷课记录表 姓名 课程名 王二麻子 ASP.NET项目开发实战 王二麻子 ASP.NET项目开发实战 李四 ASP.NET项目开发实战 王二麻子 Android移动应用基础教程 张三 Android移动应用基础教程 王二麻子 毛泽东思想和中国特色社会主义理论体系概论 最终表 姓名 是否旷课 张三 是 李四 是 孙七 否 实现其实这种也是用VLOOKUP来实现。 姓名 是否旷课 张三 =VLOOKUP(A2,C$13:D$19,2,FALSE) 李四 =VLOOKUP(A3,C$13:D$19,2,FALSE) 如果有返回值不为“#N/A”，即代表有旷课记录，用Ctrl+R替换下数据就可，但是这样还不是最简单的，有没有一步到位的，有旷课记录的话直接返回“是“，没有的话返回”否“。 姓名 是否旷课 张三 =IF(ISERROR(VLOOKUP(A2,C$13:D$19,2,FALSE)),”否”,”是”) 李四 =IF(ISERROR(VLOOKUP(A2,C$13:D$19,2,FALSE)),”否”,”是”) 孙七 =IF(ISERROR(VLOOKUP(A2,C$13:D$19,2,FALSE)),”否”,”是”)]]></content>
      <categories>
        <category>Excel</category>
      </categories>
      <tags>
        <tag>统计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos 7.2 安装MySQL及Navicat远程连接]]></title>
    <url>%2F2016%2F09%2F22%2Fcentos7-mysql%2F</url>
    <content type="text"><![CDATA[阿里云ESC一个月10个大洋，是腾讯云的10倍。。但是突然相通了，10个大洋不就是一顿饭钱吗，于是速购一台linux。 系统版本12[root@iZm5eg56n6ff2an1422nazZ ~]# cat /etc/redhat-release CentOS Linux release 7.2.1511 (Core) MySQL安装按照惯例执行以下三句 123yum install mysqlyum install mysql-develyum install mysql-server 执行最后一句时会报这样错误 123456789[root@iZm5eg56n6ff2an1422nazZ ~]# yum install mysql-serverLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: mirrors.aliyuncs.com * epel: mirrors.aliyuncs.com * extras: mirrors.aliyuncs.com * updates: mirrors.aliyuncs.comNo package mysql-server available.Error: Nothing to do 查资料之后发现Centos 7将MySQL数据库从默认程序列表中（yum源）移除，用mariadb代替了。 方法一 ：安装MariaDB安装MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 1yum install mariadb-server mariadb MariaDB数据库相关命令是： systemctl start mariadb #启动MariaDB systemctl stop mariadb #停止MariaDB systemctl restart mariadb #重启MariaDB systemctl enable mariadb #设置开机启动 开启systemctl start mariadb 现在就可以使用了。 测试初次安装MySQL，root账号没有密码。 12345678910111213141516171819[root@iZm5eg56n6ff2an1422nazZ ~]# mysql -uroot -pEnter password: Welcome to the MariaDB monitor. Commands end with ; or \g.Your MariaDB connection id is 3Server version: 5.5.50-MariaDB MariaDB ServerCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MariaDB [(none)]&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || test |+--------------------+4 rows in set (0.00 sec) 方法二执行以下三句话，通过链接下载安装。 123wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmrpm -ivh mysql-community-release-el7-5.noarch.rpmyum install mysql-community-server 安装之后重启 1service mysqld restart ##设置MySQL密码 12mysql&gt;set password for 'root'@localhost =password('newpwd');Query OK, 0 rows affected (0.00 sec) 设置MySQL密码，不用重启。 远程连接设置把在所有数据库的所在表的所有权赋值给位于所有IP地址的root用户。 1mysql&gt; grant all privileges on *.* to root@'%'identified by 'password'; 如果是新用户而不是root，则要先新建用户 1mysql&gt; create user 'username'@'%' identified by 'password'; 要想在Navicat远程，还需要最后一步，关闭防火墙。 1systemctl stop firewalld 否则Navicat会提示”2003 - Cant connect to MySQL server on ‘IP地址’(10060 “Unknown error”)” 此时就可以进行远程连接了。 参考： http://www.cnblogs.com/starof/p/4680083.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>Navicat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[物品竞拍流程]]></title>
    <url>%2F2016%2F09%2F01%2Fcountdown-mysql%2F</url>
    <content type="text"><![CDATA[最近这一个月一直在做齐鲁软件设计大赛的项目，参赛题目是智能手机程序设计，今晚终于有时间有心情静下来写写物品竞拍流程所遇到的坑。其实用了三天空闲时间写完的。=.= 其实用了三天空闲时间写完的。=.= 具体的业务流程A用户发起物品 –&gt;倒计时开始–&gt;其他用户交保证金–&gt;开始竞拍出价–&gt;五分钟内不能出价–&gt;倒计时结束–&gt;价高者胜出–&gt;生成订单–&gt;胜出者支付–&gt;A用户发快递–&gt;胜出者接收快递–&gt;胜出者确认收货 具体分析其中有7部分是主要的，看似复杂其实理清思路之后就是敲代码了。由于我们项目的数据是用的Bmob的，但是对于较大型的项目用第三方的平台确实是省了些硬件上的成本，但是从反面来说肯定也会增加代码的行数，毕竟用第三方的数据库不会由我们完全自定义。就这样数据分为两部分，文件数据及大部分数据保存在Bmob，一部分保存在自己的服务器。 为什么要自己搭服务器？ 原因就是在业务流程上，当倒计时结束后既要将保证金退回，而且还要生成新的订单，用第三方的肯定实现不了服务器主动定时做一件事。 服务器系统怎样实现定时主动做一件事？（三种方式整理于网络） 在WebService中开启线程 利用服务器系统计划任务 利用数据库事件实现 三种方式1.在WebService中开启线程在查找众多关于C#线程资料之后，有三种方法。 Thread Timer Thread包下的Timer 三种方式中最后一种方式比较稳定，然后我将写好的WebService发布到服务器进行时间稳定性测试，结果发现最后一种5分钟内可以实现，40分钟将不能实现功能，因为业务需求中时间段最小还是6h，所以就没测试别的时间段。（PS：服务器系统参数 1G运内，1核，50G硬盘，只说参数不打广告 ): ） 2.利用操作系统（Windows）计划任务计划任务程序位置： 控制面板–&gt;系统和安全–&gt;管理工具–&gt;计划任务程序 桌面操作系统中有三种功能，分别是启动程序、发送电子邮件及显示消息。 3.利用数据库事件实现准备： mysql5.5（5.1之前无事件功能）VS xxxx Navicat11Navicat这个软件是数据库可视化工具，对于SQL语句基础不怎么好的，软件中的SQL预览可以帮助你。 思路WebService –&gt; Mysql Event –&gt; Mysql Produce –&gt; SQL Execute 连接数据库123456789public class DBHelper&#123; public static MySqlConnection ConnDB() &#123; String mysqlStr = &quot;Database=Commonweal;Data Source=127.0.0.1;User Id=root;Password=root;pooling=false;CharSet=utf8;port=3306;Allow User Variables=True;&quot;; MySqlConnection conn = new MySqlConnection(mysqlStr); conn.Open(); return conn; &#125;&#125; 其中，当你写的要执行的SQL语句中包含”@”会被C#当为参数化进行SQL语句组装，防止SQL语句注入。Data Source=127.0.0.1值也可以填服务器运营商提供的外网IP，还需要在Mysql新建一个用户，设置用户名、密码，为了安全最好设置访问服务器的具体IP。这样的话WebService在本地测试就行，测试完成之后发布到服务器就行了，很方便的。 执行SQL语句12345678910111213141516string sql = @&quot;insert into Good(G_ID, G_StartTime, G_EndTime, G_Status) values(&apos;&quot; + ObjectId + @&quot;&apos;, &apos;&quot; + NowTime + @&quot;&apos;, &apos;&quot; + EndTime + @&quot;&apos;, &apos;1&apos;); CREATE EVENT `A_&quot; + NowTime + r.Next(10, 100) + @&quot;` ON SCHEDULE AT &apos;&quot; + EndTime + @&quot;&apos; ON COMPLETION NOT PRESERVE ENABLE DO CALL Pro_EndTime(&apos;&quot; + ObjectId + @&quot;&apos;); CREATE EVENT `B_&quot; + NowTime + r.Next(10, 100) + @&quot;` ON SCHEDULE AT &apos;&quot; + EndTime2Hours + @&quot;&apos; ON COMPLETION NOT PRESERVE ENABLE DO CALL Pro_EndTime2Hours(&apos;&quot; + ObjectId + @&quot;&apos;);; &quot;; DBHelper.ExecuteSqlNoQuery(sql); 123456789public class DBHelper&#123; public static void ExecuteSqlNoQuery(string sql) &#123; MySqlConnection conn = ConnDB(); MySqlCommand cmd = new MySqlCommand(sql, conn); cmd.ExecuteNonQuery(); conn.Close(); &#125; &#125; 其中sql中@是转义不报错。 SQL中创建事件先说下刚开始的一种思路所带来的坑思路 WebService–&gt;Mysql事件–&gt;事件中的多条Sql语句–&gt;复杂的功能实现 用这种方法，在事件下要写很多sql语句，如下代码块，在查找众多国内外网站之后想要在事件里执行多条语句需要在多条sql语句最前面和最后面分别加BEGIN和END，而且还要在事件最前端和最后端加入delimiter $$和$$ 作为界限符，这样看来既像存储过程然而也不完全是存储过程。但是在Navicat中不会报错，然后我就天真的以为完成了，但是将代码完全复制到WebService，将一些参数拼接起来，执行后，报代码错误。。。。 12345678910111213 delimiter $$CREATE EVENT `事件名` ON SCHEDULE AT &apos;时间点&apos; ON COMPLETION NOT PRESERVE ENABLE DOBEGIN sql1; sql2 sql3; ...;END;$$ 另辟蹊径WebService–&gt;Mysql事件–&gt;事件调用存储过程–&gt;复杂的功能实现 坑1：新建存储过程–&gt;添加存储过程参数，参数类型长度不会自动指定，而且也没有要填写参数长度的”()”，然后就一直报错。 坑2:执行存储过程，当有varchar类型一定要加单引号！！ WebService1234567string sql = @&quot;CREATE EVENT `A_&quot; + NowTime + r.Next(10, 100) + @&quot;` ON SCHEDULE AT &apos;&quot; + EndTime + @&quot;&apos; ON COMPLETION NOT PRESERVE ENABLE DO CALL Pro_Test(&apos;&quot; + ObjectId + @&quot;&apos;); &quot;; Mysql 事件 1CALL Pro_Test(&apos;IltR111A113&apos;) 存储过程 1234567CREATE DEFINER = CURRENT_USER PROCEDURE `NewProc`(IN `id` varchar(20))BEGIN UPDATE good_orderSET O_Status = &apos;0&apos;WHERE O_ID = Good_ID;END; 小知识Mysql 查看当前是否已开启事件调度器 1SHOW VARIABLES LIKE &apos;event_scheduler&apos; 开启事件 1SET GLOBAL event_scheduler = 1;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>拍卖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio插件之ADB WIFI]]></title>
    <url>%2F2016%2F06%2F11%2Fandroid-studio-adb-wifi%2F</url>
    <content type="text"><![CDATA[甩掉数据线吧！前提手机需要Root 为Android Studio安装ADB WIFI插件下载并安装File–&gt;Settings–&gt;Plugins–&gt;搜索“ADB WIFI”–&gt;Reset Android Studio 查看安装Tools–&gt;Android–&gt;ADB WIFI 为真机安装ADB WIFI并开启端口 安卓版ADB WIFI下载直接下载链接传送门 连接（手机电脑必须在同一局域网）在Android Studio命令行输入手机ADB WIFI显示的IP地址，我手机的IP地址是192.168.31.231，所以输入adb connect 192.168.31.231连接成功会有connected to 192.168.31.231:5555提示再次输入adb connect 192.168.31.231会有already connected to 192.168.31.231:5555提示]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ADB WIFI</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汇总第三方服务SDK]]></title>
    <url>%2F2016%2F06%2F01%2Fgather-Third-party-service-sdk%2F</url>
    <content type="text"><![CDATA[本人经过测试众多第三方服务SDK总结出配置、功能较全的SDK汇总 推送个推配置相对于其他推送SDK较简单，坑也较少。 统计Umeng+功能较全，配置也算简单。 云存储Bmob配置较简单，免费额度足够使用，功能较全，比如邮箱注册，App网站。 短信验证码MobApp在其官网审核成功的话就可以获得永久免费的短信服务。 广告WAPS配置较简单，坑较少，审核速度还可以，客服MM热情招待~。 以上想法仅代表个人意见，如有错误或者侵权请联系我~]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>推送</tag>
        <tag>统计</tag>
        <tag>云存储</tag>
        <tag>短信验证码</tag>
        <tag>广告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio 添加so库引用]]></title>
    <url>%2F2016%2F05%2F24%2Fandroid-studio-add-so%2F</url>
    <content type="text"><![CDATA[竟然是还得需要加so库引用。 最近打算更新ShareMy，然后开源，开源肯定会让自己的代码更加规范、严谨。正在测试上传文件时，发现失败了，上传文件我是用的Bmob SDK，去官网看了下发现SDK更新了，遂下载最新SDK–&gt;解压–&gt;导入SDK–&gt;运行，结果发现就是有这样错误java.lang.UnsatisfiedLinkError: Couldn&#39;t load bmob from loader dalvik.system.PathClassLoader[DexPathList[[zip file &quot;/data/app/top.kiuber.sharemy-1.apk&quot;],nativeLibraryDirectories=[/data/app-lib/top.kiuber.sharemy-1, /vendor/lib, /system/lib]]]: findLibrary returned nullgoogle了下，还是找不到答案，最后突然想到so库需要导入，然后google了下，一种跟简单的方法可以添加so库引用。 在src–&gt;main–&gt;新建‘jniLibs’文件夹 把so库文件夹及文件夹内文件一同复制到jniLibs文件夹内 在MainActivity.java的onCreate方法中加入// 库名, 注意没有前缀lib和后缀.so System. String libName = &quot;bmob&quot;; loadLibrary( libName ); 调试看下就没问题了。]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>.so</tag>
        <tag>Bmob</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】MarkDown常用的语法]]></title>
    <url>%2F2016%2F05%2F09%2Fmd-code%2F</url>
    <content type="text"><![CDATA[汇总一些MarkDown常用的语法，以便日后用。 强调12345678星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格**一个人来到田纳西**__毫无疑问__*我做的馅饼是全天下*_最好吃的_ 一个人来到田纳西 毫无疑问我做的馅饼是全天下最好吃的 分割线123三个或更多-_*，必须单独一行，可含空格--- 引用123翻译成html就是&lt;blockquote&gt;&lt;/blockquote&gt;，符号后的空格可不要&gt; 引用 引用1234内层符号前的空格必须要&gt;引用 &gt;&gt;引用中的引用 引用 引用中的引用 标题：Setext方式123456三个或更多大标题===小标题--- 大标题小标题标题：Atx方式123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 一级标题二级标题三级标题四级标题五级标题六级标题无序列表123456符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长- 无序列表- 无序列表- 无序列表- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！ 符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长 无序列表 无序列表 无序列表 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！12345符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表+ 无序列表+ 无序列表+ 无序列表 符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表 无序列表 无序列表 无序列表12345符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表* 无序列表* 无序列表* 无序列表 符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表 无序列表 无序列表 无序列表有序列表123456数字不能省略但可无序，点号之后的空格不能少1. 有序列表2. 有序列表3. 有序列表8. 有序列表 数字不能省略但可无序，点号之后的空格不能少 有序列表 有序列表 有序列表 有序列表嵌套列表12345678-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少- 嵌套列表 + 嵌套列表 + 嵌套列表 - 嵌套列表 * 嵌套列表- 嵌套列表 -+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表文字超链：Inline方式123Tooltips可省略[不如](http://bruce-sha.github.io &quot;不如的博客&quot;) Tooltips可省略 不如 图片超链123多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png &quot;GitHub Mark&quot;) 多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记 索引超链：Reference方式1234567索引，1 2可以是任意字符[不如][1]![GitHub Octocat][2][1]:http://bruce-sha.github.io[2]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png 自动链接1234尖括号&lt;http://ibruce.info&gt;&lt;bu.ru@qq.com&gt; 尖括号 http://ibruce.info &#98;&#x75;&#x2e;&#x72;&#x75;&#x40;&#x71;&#113;&#46;&#99;&#x6f;&#x6d; 代码：行内代码123在第一行后指定编程语言，也可以不指定undefined 12val s = &quot;hello Markdown&quot;println( s ) 代码：段落代码1234每行文字前加4个空格或者1个Tabval s = &quot;hello Markdown&quot;println( s ) 代码：hexo12345可指定编程语言，『』代表左右大括号『% codeblock [title] [lang:language] [url] [link text] %』 code snippet『% endcodeblock %』 注释123用html的注释，好像只有这样？&lt;!-- 注释 --&gt; 转义字符123456789101112131415用html的注释，好像只有这样？Markdown中的转义字符为\，转义的有：\\ 反斜杠\` 反引号\* 星号\_ 下划线\&#123;\&#125; 大括号\[\] 中括号\(\) 小括号\# 井号\+ 加号\- 减号\. 英文句号\! 感叹号 其它1文本中可直接用html标签，但是要前后加上空行。 one more thing：表格123456Markdown的扩展语法，hexo不支持|| *Year* || *Temperature (low)* || *Temperature (high)* |||| 1900 || -10 || 25 |||| 1910 || -15 || 30 |||| 1920 || -10 || 32 || 转载自markdown简明语法]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
        <tag>汇总</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[awesome-android-tips]]></title>
    <url>%2F2016%2F05%2F02%2Fawesome-android-tips%2F</url>
    <content type="text"><![CDATA[这里收集了大家常用的一些Android代码,持续更新中,内容来自自己的平时积累和网络上看到的文章，部分原文地址在最下方。如有错误欢迎指正,如有侵权,请联系我删除。里面可能会有重复内容,请忽略,有需要的可以fork,fork前别忘了点赞哦 转载自https://github.com/jiang111/awesome-android-tips]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#+sql]]></title>
    <url>%2F2016%2F04%2F28%2Fcsharp-sql%2F</url>
    <content type="text"><![CDATA[简单的C#连接数据库，并进行增删改查。 本文全部手打，目的是记录和复习下。 连接123string strConn = &quot;data source = 127.0.0.1;initial catalog = 数据库名uid = sa;password = sa &quot;;SqlConncetion conn = new SqlConnection(conn);conn.Open(); 增删改查增加1string strSQL = &quot;insert into 表名(列名1,列名2) values(&apos;value1&apos;,&apos;value2&apos;)&quot;; 删除1string strSQL = &quot;delete from 表名 where 列名 = &apos;value&apos;&quot; 改变1string strSQL = &quot;update 表名 set 列名 = &apos;new_value&apos; where = &apos;old_value&apos;&quot;; 查询1string strSQL = &quot;select * from 表名&quot;; 执行增删改1234SqlCommand cmd = new SqlCommand(strSQL,conn);cmd.ExecuteNonQuery();conn.Close();]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TabLayout+ViewPager实现选项卡滑动]]></title>
    <url>%2F2016%2F04%2F27%2Fandroid-study-TabLayout-ViewPager%2F</url>
    <content type="text"><![CDATA[Google在2015的IO大会上，给我们带来了更加详细的Material Design设计规范，同时，给我们带来了全新的Android Design Support Library，在这个Support中，谷歌给我们提供了更加规范的MD设计风格的空间。最重要的是，Android Design Support Library的兼容性更广，直接可以向下兼容到Android 2.2。之前我也一直想做出一个选项卡实例，看到网上他们写的教程太难懂了，也可能是因为我没能力懂他们写的，所以我还是自己写一份这个吧，学习安卓的朋友也可以借鉴借鉴，废话就不多说了，上菜。 第一步，当然是写layout文件1234567891011121314&lt;android.support.design.widget.TabLayout android:id="@+id/tab_FindFragment_title" android:layout_width="match_parent" android:layout_height="wrap_content" android:background="#87CEEB" app:tabIndicatorColor="#ffffff" app:tabSelectedTextColor="@android:color/darker_gray" app:tabTextColor="#ffffff" /&gt;&lt;android.support.v4.view.ViewPager android:id="@+id/vp_FindFragment_pager" android:layout_width="fill_parent" android:layout_height="0dp" android:layout_weight="1" /&gt; 其中tabSelectedTextColor是指Tab被选中的颜色，tabTextColor是指Tab未被选中的颜色，tabIndicatorColor是指指示器下标的颜色。 第二步，声明变量并找到控件对象。12private TabLayout tab;private ViewPager viewPager; 12tab = (TabLayout) findViewById(R.id.tab_FindFragment_title);viewPager = (ViewPager) findViewById(R.id.vp_FindFragment_pager); 第三步，为viewPager设置适配器，并修改getItem()，getCount()方法的返回值,复写getPageTitle()方法。1viewPager.setAdapter(new CustomAdapter(getSupportFragmentManager(), getApplicationContext())); 1234567891011121314151617181920212223242526272829private class CustomAdapter extends FragmentPagerAdapter &#123; private String fragments[] = &#123;"Fragment1", "Fragment2"&#125;; public CustomAdapter(FragmentManager supportFragmentManager, Context applicationContext) &#123; super(supportFragmentManager); &#125; @Override public Fragment getItem(int position) &#123; switch (position) &#123; case 0: return new Fragment1(); case 1: return new Fragment2(); default: return null; &#125; &#125; @Override public int getCount() &#123; return fragments.length; &#125; @Override public CharSequence getPageTitle(int position) &#123; return fragments[position]; &#125; &#125; 第四步，新建Fragment1、fragment2类继承Fragment,新建f1、f2布局文件，并实现onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)方法。1234567public class Fragment1 extends Fragment &#123; @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; return inflater.inflate(R.layout.f1, container, false); &#125;&#125; 1234567public class Fragment2 extends Fragment &#123; @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; return inflater.inflate(R.layout.f2, container, false); &#125;&#125; 第五步，为tab绑定viewPager，并为tab设置setOnTabSelectedListener。1tab.setupWithViewPager(viewPager); 12345678910111213141516tab.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener() &#123; @Override public void onTabSelected(TabLayout.Tab tab) &#123; viewPager.setCurrentItem(tab.getPosition()); &#125; @Override public void onTabUnselected(TabLayout.Tab tab) &#123; viewPager.setCurrentItem(tab.getPosition()); &#125; @Override public void onTabReselected(TabLayout.Tab tab) &#123; viewPager.setCurrentItem(tab.getPosition()); &#125; &#125;); 注意：1.一定要注意tab.setupWithViewPager(viewPager);写在viewPager.setAdapter(new CustomAdapter(getSupportFragmentManager(),getApplicationContext()))之后，否则会报错viewPager do not set。2.viewPager的width和height要设置合适，有时可能是显示了，但是由于设置宽度和高度的问题，可能会让你误以为设置错误。参考资料：ViewPager with TabLayout in Android - Sliding Tabs]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>选项卡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些十六进制的颜色]]></title>
    <url>%2F2016%2F04%2F27%2Fsome-hex-color%2F</url>
    <content type="text"><![CDATA[整理于网络 &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt;&lt;!--白色 --&gt; &lt;color name=&quot;ivory&quot;&gt;#FFFFF0&lt;/color&gt;&lt;!--象牙色 --&gt; &lt;color name=&quot;lightyellow&quot;&gt;#FFFFE0&lt;/color&gt;&lt;!--亮黄色 --&gt; &lt;color name=&quot;yellow&quot;&gt;#FFFF00&lt;/color&gt;&lt;!--黄色 --&gt; &lt;color name=&quot;snow&quot;&gt;#FFFAFA&lt;/color&gt;&lt;!--雪白色 --&gt; &lt;color name=&quot;floralwhite&quot;&gt;#FFFAF0&lt;/color&gt;&lt;!--花白色 --&gt; &lt;color name=&quot;lemonchiffon&quot;&gt;#FFFACD&lt;/color&gt;&lt;!--柠檬绸色 --&gt; &lt;color name=&quot;cornsilk&quot;&gt;#FFF8DC&lt;/color&gt;&lt;!--米绸色 --&gt; &lt;color name=&quot;seashell&quot;&gt;#FFF5EE&lt;/color&gt;&lt;!--海贝色 --&gt; &lt;color name=&quot;lavenderblush&quot;&gt;#FFF0F5&lt;/color&gt;&lt;!--淡紫红 --&gt; &lt;color name=&quot;papayawhip&quot;&gt;#FFEFD5&lt;/color&gt;&lt;!--番木色 --&gt; &lt;color name=&quot;blanchedalmond&quot;&gt;#FFEBCD&lt;/color&gt;&lt;!--白杏色 --&gt; &lt;color name=&quot;mistyrose&quot;&gt;#FFE4E1&lt;/color&gt;&lt;!--浅玫瑰色 --&gt; &lt;color name=&quot;text_color&quot;&gt;#717171&lt;/color&gt;&lt;!--浅玫瑰色 --&gt; &lt;color name=&quot;bisque&quot;&gt;#FFE4C4&lt;/color&gt;&lt;!--桔黄色 --&gt; &lt;color name=&quot;moccasin&quot;&gt;#FFE4B5&lt;/color&gt;&lt;!--鹿皮色 --&gt; &lt;color name=&quot;navajowhite&quot;&gt;#FFDEAD&lt;/color&gt;&lt;!--纳瓦白 --&gt; &lt;color name=&quot;peachpuff&quot;&gt;#FFDAB9&lt;/color&gt;&lt;!--桃色 --&gt; &lt;color name=&quot;gold&quot;&gt;#FFD700&lt;/color&gt;&lt;!--金色 --&gt; &lt;color name=&quot;pink&quot;&gt;#FFC0CB&lt;/color&gt;&lt;!--粉红色 --&gt; &lt;color name=&quot;lightpink&quot;&gt;#FFB6C1&lt;/color&gt;&lt;!--亮粉红色 --&gt; &lt;color name=&quot;orange&quot;&gt;#FFA500&lt;/color&gt;&lt;!--橙色 --&gt; &lt;color name=&quot;lightsalmon&quot;&gt;#FFA07A&lt;/color&gt;&lt;!--亮肉色 --&gt; &lt;color name=&quot;darkorange&quot;&gt;#FF8C00&lt;/color&gt;&lt;!--暗桔黄色 --&gt; &lt;color name=&quot;coral&quot;&gt;#FF7F50&lt;/color&gt;&lt;!--珊瑚色 --&gt; &lt;color name=&quot;hotpink&quot;&gt;#FF69B4&lt;/color&gt;&lt;!--热粉红色 --&gt; &lt;color name=&quot;tomato&quot;&gt;#FF6347&lt;/color&gt;&lt;!--西红柿色 --&gt; &lt;color name=&quot;orangered&quot;&gt;#FF4500&lt;/color&gt;&lt;!--红橙色 --&gt; &lt;color name=&quot;deeppink&quot;&gt;#FF1493&lt;/color&gt;&lt;!--深粉红色 --&gt; &lt;color name=&quot;fuchsia&quot;&gt;#FF00FF&lt;/color&gt;&lt;!--紫红色 --&gt; &lt;color name=&quot;magenta&quot;&gt;#FF00FF&lt;/color&gt;&lt;!--红紫色 --&gt; &lt;color name=&quot;red&quot;&gt;#FF0000&lt;/color&gt;&lt;!--红色 --&gt; &lt;color name=&quot;oldlace&quot;&gt;#FDF5E6&lt;/color&gt;&lt;!--老花色 --&gt; &lt;color name=&quot;lightgoldenrodyellow&quot;&gt;#FAFAD2&lt;/color&gt;&lt;!--亮金黄色 --&gt; &lt;color name=&quot;linen&quot;&gt;#FAF0E6&lt;/color&gt;&lt;!--亚麻色 --&gt; &lt;color name=&quot;antiquewhite&quot;&gt;#FAEBD7&lt;/color&gt;&lt;!--古董白 --&gt; &lt;color name=&quot;salmon&quot;&gt;#FA8072&lt;/color&gt;&lt;!--鲜肉色 --&gt; &lt;color name=&quot;ghostwhite&quot;&gt;#F8F8FF&lt;/color&gt;&lt;!--幽灵白 --&gt; &lt;color name=&quot;mintcream&quot;&gt;#F5FFFA&lt;/color&gt;&lt;!--薄荷色 --&gt; &lt;color name=&quot;whitesmoke&quot;&gt;#F5F5F5&lt;/color&gt;&lt;!--烟白色 --&gt; &lt;color name=&quot;beige&quot;&gt;#F5F5DC&lt;/color&gt;&lt;!--米色 --&gt; &lt;color name=&quot;wheat&quot;&gt;#F5DEB3&lt;/color&gt;&lt;!--浅黄色 --&gt; &lt;color name=&quot;sandybrown&quot;&gt;#F4A460&lt;/color&gt;&lt;!--沙褐色 --&gt; &lt;color name=&quot;azure&quot;&gt;#F0FFFF&lt;/color&gt;&lt;!--天蓝色 --&gt; &lt;color name=&quot;honeydew&quot;&gt;#F0FFF0&lt;/color&gt;&lt;!--蜜色 --&gt; &lt;color name=&quot;aliceblue&quot;&gt;#F0F8FF&lt;/color&gt;&lt;!--艾利斯兰 --&gt; &lt;color name=&quot;khaki&quot;&gt;#F0E68C&lt;/color&gt;&lt;!--黄褐色 --&gt; &lt;color name=&quot;lightcoral&quot;&gt;#F08080&lt;/color&gt;&lt;!--亮珊瑚色 --&gt; &lt;color name=&quot;palegoldenrod&quot;&gt;#EEE8AA&lt;/color&gt;&lt;!--苍麒麟色 --&gt; &lt;color name=&quot;violet&quot;&gt;#EE82EE&lt;/color&gt;&lt;!--紫罗兰色 --&gt; &lt;color name=&quot;darksalmon&quot;&gt;#E9967A&lt;/color&gt;&lt;!--暗肉色 --&gt; &lt;color name=&quot;lavender&quot;&gt;#E6E6FA&lt;/color&gt;&lt;!--淡紫色 --&gt; &lt;color name=&quot;lightcyan&quot;&gt;#E0FFFF&lt;/color&gt;&lt;!--亮青色 --&gt; &lt;color name=&quot;burlywood&quot;&gt;#DEB887&lt;/color&gt;&lt;!--实木色 --&gt; &lt;color name=&quot;plum&quot;&gt;#DDA0DD&lt;/color&gt;&lt;!--洋李色 --&gt; &lt;color name=&quot;gainsboro&quot;&gt;#DCDCDC&lt;/color&gt;&lt;!--淡灰色 --&gt; &lt;color name=&quot;crimson&quot;&gt;#DC143C&lt;/color&gt;&lt;!--暗深红色 --&gt; &lt;color name=&quot;palevioletred&quot;&gt;#DB7093&lt;/color&gt;&lt;!--苍紫罗兰色--&gt; &lt;color name=&quot;goldenrod&quot;&gt;#DAA520&lt;/color&gt;&lt;!--金麒麟色 --&gt; &lt;color name=&quot;orchid&quot;&gt;#DA70D6&lt;/color&gt;&lt;!--淡紫色 --&gt; &lt;color name=&quot;thistle&quot;&gt;#D8BFD8&lt;/color&gt;&lt;!--蓟色 --&gt; &lt;color name=&quot;lightgray&quot;&gt;#D3D3D3&lt;/color&gt;&lt;!--亮灰色 --&gt; &lt;color name=&quot;lightgrey&quot;&gt;#D3D3D3&lt;/color&gt;&lt;!--亮灰色 --&gt; &lt;color name=&quot;tan&quot;&gt;#D2B48C&lt;/color&gt;&lt;!--茶色 --&gt; &lt;color name=&quot;chocolate&quot;&gt;#D2691E&lt;/color&gt;&lt;!--巧可力色 --&gt; &lt;color name=&quot;peru&quot;&gt;#CD853F&lt;/color&gt;&lt;!--秘鲁色 --&gt; &lt;color name=&quot;indianred&quot;&gt;#CD5C5C&lt;/color&gt;&lt;!--印第安红 --&gt; &lt;color name=&quot;mediumvioletred&quot;&gt;#C71585&lt;/color&gt;&lt;!--中紫罗兰色 --&gt; &lt;color name=&quot;silver&quot;&gt;#C0C0C0&lt;/color&gt;&lt;!--银色 --&gt; &lt;color name=&quot;darkkhaki&quot;&gt;#BDB76B&lt;/color&gt;&lt;!-- 暗黄褐色 --&gt; &lt;color name=&quot;rosybrown&quot;&gt;#BC8F8F&lt;/color&gt;&lt;!--褐玫瑰红--&gt; &lt;color name=&quot;mediumorchid&quot;&gt;#BA55D3&lt;/color&gt;&lt;!--中粉紫色 --&gt; &lt;color name=&quot;darkgoldenrod&quot;&gt;#B8860B&lt;/color&gt;&lt;!--暗金黄色 --&gt; &lt;color name=&quot;firebrick&quot;&gt;#B22222&lt;/color&gt;&lt;!--火砖色 --&gt; &lt;color name=&quot;powderblue&quot;&gt;#B0E0E6&lt;/color&gt;&lt;!--粉蓝色 --&gt; &lt;color name=&quot;lightsteelblue&quot;&gt;#B0C4DE&lt;/color&gt;&lt;!--亮钢兰色 --&gt; &lt;color name=&quot;paleturquoise&quot;&gt;#AFEEEE&lt;/color&gt;&lt;!--苍宝石绿 --&gt; &lt;color name=&quot;greenyellow&quot;&gt;#ADFF2F&lt;/color&gt;&lt;!--黄绿色 --&gt; &lt;color name=&quot;lightblue&quot;&gt;#ADD8E6&lt;/color&gt;&lt;!--亮蓝色 --&gt; &lt;color name=&quot;darkgray&quot;&gt;#A9A9A9&lt;/color&gt;&lt;!--暗灰色 --&gt; &lt;color name=&quot;darkgrey&quot;&gt;#A9A9A9&lt;/color&gt;&lt;!--暗灰色 --&gt; &lt;color name=&quot;brown&quot;&gt;#A52A2A&lt;/color&gt;&lt;!--褐色 --&gt; &lt;color name=&quot;sienna&quot;&gt;#A0522D&lt;/color&gt;&lt;!--赭色 --&gt; &lt;color name=&quot;darkorchid&quot;&gt;#9932CC&lt;/color&gt;&lt;!--暗紫色 --&gt; &lt;color name=&quot;palegreen&quot;&gt;#98FB98&lt;/color&gt;&lt;!--苍绿色 --&gt; &lt;color name=&quot;darkviolet&quot;&gt;#9400D3&lt;/color&gt;&lt;!--暗紫罗兰色 --&gt; &lt;color name=&quot;mediumpurple&quot;&gt;#9370DB&lt;/color&gt;&lt;!--中紫色 --&gt; &lt;color name=&quot;lightgreen&quot;&gt;#90EE90&lt;/color&gt;&lt;!--亮绿色 --&gt; &lt;color name=&quot;darkseagreen&quot;&gt;#8FBC8F&lt;/color&gt;&lt;!--暗海兰色 --&gt; &lt;color name=&quot;saddlebrown&quot;&gt;#8B4513&lt;/color&gt;&lt;!--重褐色 --&gt; &lt;color name=&quot;darkmagenta&quot;&gt;#8B008B&lt;/color&gt;&lt;!--暗洋红 --&gt; &lt;color name=&quot;darkred&quot;&gt;#8B0000&lt;/color&gt;&lt;!--暗红色 --&gt; &lt;color name=&quot;blueviolet&quot;&gt;#8A2BE2&lt;/color&gt;&lt;!-- 紫罗兰蓝色--&gt; &lt;color name=&quot;lightskyblue&quot;&gt;#87CEFA&lt;/color&gt;&lt;!--亮天蓝色--&gt; &lt;color name=&quot;skyblue&quot;&gt;#87CEEB&lt;/color&gt;&lt;!--天蓝色 --&gt; &lt;color name=&quot;gray&quot;&gt;#808080&lt;/color&gt;&lt;!--灰色 --&gt; &lt;color name=&quot;grey&quot;&gt;#808080&lt;/color&gt;&lt;!--灰色 --&gt; &lt;color name=&quot;olive&quot;&gt;#808000&lt;/color&gt;&lt;!--橄榄色 --&gt; &lt;color name=&quot;purple&quot;&gt;#800080&lt;/color&gt;&lt;!--紫色 --&gt; &lt;color name=&quot;maroon&quot;&gt;#800000&lt;/color&gt;&lt;!--粟色 --&gt; &lt;color name=&quot;aquamarine&quot;&gt;#7FFFD4&lt;/color&gt;&lt;!--碧绿色 --&gt; &lt;color name=&quot;chartreuse&quot;&gt;#7FFF00&lt;/color&gt;&lt;!--黄绿色 --&gt; &lt;color name=&quot;lawngreen&quot;&gt;#7CFC00&lt;/color&gt;&lt;!--草绿色 --&gt; &lt;color name=&quot;mediumslateblue&quot;&gt;#7B68EE&lt;/color&gt;&lt;!--中暗蓝色 --&gt; &lt;color name=&quot;lightslategray&quot;&gt;#778899&lt;/color&gt;&lt;!--亮蓝灰 --&gt; &lt;color name=&quot;lightslategrey&quot;&gt;#778899&lt;/color&gt;&lt;!--亮蓝灰 --&gt; &lt;color name=&quot;slategray&quot;&gt;#708090&lt;/color&gt;&lt;!--灰石色 --&gt; &lt;color name=&quot;slategrey&quot;&gt;#708090&lt;/color&gt;&lt;!--灰石色 --&gt; &lt;color name=&quot;olivedrab&quot;&gt;#6B8E23&lt;/color&gt;&lt;!--深绿褐色 --&gt; &lt;color name=&quot;slateblue&quot;&gt;#6A5ACD&lt;/color&gt;&lt;!--石蓝色 --&gt; &lt;color name=&quot;dimgray&quot;&gt;#696969&lt;/color&gt;&lt;!--暗灰色 --&gt; &lt;color name=&quot;dimgrey&quot;&gt;#696969&lt;/color&gt;&lt;!--暗灰色 --&gt; &lt;color name=&quot;mediumaquamarine&quot;&gt;#66CDAA&lt;/color&gt;&lt;!--中绿色--&gt; &lt;color name=&quot;cornflowerblue&quot;&gt;#6495ED&lt;/color&gt;&lt;!--菊兰色 --&gt; &lt;color name=&quot;cadetblue&quot;&gt;#5F9EA0&lt;/color&gt;&lt;!--军兰色 --&gt; &lt;color name=&quot;darkolivegreen&quot;&gt;#556B2F&lt;/color&gt;&lt;!-- 暗橄榄绿 --&gt; &lt;color name=&quot;indigo&quot;&gt;#4B0082&lt;/color&gt;&lt;!--靛青色 --&gt; &lt;color name=&quot;mediumturquoise&quot;&gt;#48D1CC&lt;/color&gt;&lt;!--中绿宝石--&gt; &lt;color name=&quot;darkslateblue&quot;&gt;#483D8B&lt;/color&gt;&lt;!--暗灰蓝色 --&gt; &lt;color name=&quot;steelblue&quot;&gt;#4682B4&lt;/color&gt;&lt;!--钢兰色 --&gt; &lt;color name=&quot;royalblue&quot;&gt;#4169E1&lt;/color&gt;&lt;!--皇家蓝 --&gt; &lt;color name=&quot;turquoise&quot;&gt;#40E0D0&lt;/color&gt;&lt;!--青绿色 --&gt; &lt;color name=&quot;mediumseagreen&quot;&gt;#3CB371&lt;/color&gt;&lt;!--中海蓝 --&gt; &lt;color name=&quot;limegreen&quot;&gt;#32CD32&lt;/color&gt;&lt;!--橙绿色 --&gt; &lt;color name=&quot;darkslategray&quot;&gt;#2F4F4F&lt;/color&gt;&lt;!--暗瓦灰色 --&gt; &lt;color name=&quot;darkslategrey&quot;&gt;#2F4F4F&lt;/color&gt;&lt;!--暗瓦灰色 --&gt; &lt;color name=&quot;seagreen&quot;&gt;#2E8B57&lt;/color&gt;&lt;!--海绿色 --&gt; &lt;color name=&quot;forestgreen&quot;&gt;#228B22&lt;/color&gt;&lt;!--森林绿 --&gt; &lt;color name=&quot;lightseagreen&quot;&gt;#20B2AA&lt;/color&gt;&lt;!--亮海蓝色 --&gt; &lt;color name=&quot;dodgerblue&quot;&gt;#1E90FF&lt;/color&gt;&lt;!--闪兰色 --&gt; &lt;color name=&quot;midnightblue&quot;&gt;#191970&lt;/color&gt;&lt;!--中灰兰色 --&gt; &lt;color name=&quot;aqua&quot;&gt;#00FFFF&lt;/color&gt;&lt;!--浅绿色 --&gt; &lt;color name=&quot;cyan&quot;&gt;#00FFFF&lt;/color&gt;&lt;!--青色 --&gt; &lt;color name=&quot;springgreen&quot;&gt;#00FF7F&lt;/color&gt;&lt;!--春绿色 --&gt; &lt;color name=&quot;lime&quot;&gt;#00FF00&lt;/color&gt;&lt;!--酸橙色 --&gt; &lt;color name=&quot;mediumspringgreen&quot;&gt;#00FA9A&lt;/color&gt;&lt;!--中春绿色 --&gt; &lt;color name=&quot;darkturquoise&quot;&gt;#00CED1&lt;/color&gt;&lt;!--暗宝石绿 --&gt; &lt;color name=&quot;deepskyblue&quot;&gt;#00BFFF&lt;/color&gt;&lt;!--深天蓝色 --&gt; &lt;color name=&quot;darkcyan&quot;&gt;#008B8B&lt;/color&gt;&lt;!--暗青色 --&gt; &lt;color name=&quot;teal&quot;&gt;#008080&lt;/color&gt;&lt;!--水鸭色 --&gt; &lt;color name=&quot;green&quot;&gt;#008000&lt;/color&gt;&lt;!--绿色 --&gt; &lt;color name=&quot;darkgreen&quot;&gt;#006400&lt;/color&gt;&lt;!--暗绿色 --&gt; &lt;color name=&quot;blue&quot;&gt;#0000FF&lt;/color&gt;&lt;!--蓝色 --&gt; &lt;color name=&quot;mediumblue&quot;&gt;#0000CD&lt;/color&gt;&lt;!--中兰色 --&gt; &lt;color name=&quot;darkblue&quot;&gt;#00008B&lt;/color&gt;&lt;!--暗蓝色 --&gt; &lt;color name=&quot;navy&quot;&gt;#000080&lt;/color&gt;&lt;!--海军色 --&gt; &lt;color name=&quot;black&quot;&gt;#000000&lt;/color&gt;&lt;!--黑色 --&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[电脑方面的快捷键]]></title>
    <url>%2F2016%2F04%2F24%2Fcomputer-shortcut-key%2F</url>
    <content type="text"><![CDATA[汇总一些实用的快捷键，不断更新中~ Windows键+B 选中桌面右下方工具栏D 显示桌面E 打开我的电脑G win10 录制游戏H win10 共享I win10 设置K win10 链接L 锁定用户M 最小化所有窗口P win10 投影Q win10 小娜R 运行S win10 小娜T 循环切换任务栏上的程序（win7、win8）U 轻松使用设置中心Shift + Windows键 + 数字 启动锁定到任务栏中的由该数字所表示位置处的程序的新实例Alt + Windows键 + 数字 打开锁定到任务栏中的由该数字所表示位置处的程序的跳转列表数字（非小键盘） 启动锁定到任务栏中的由该数字所表示位置处的程序。如果该程序已在运行，则切换到该程序Tab 使用 Aero Flip 3-D 循环切换任务栏上的程向上键 最大化窗口向左键 将窗口最大化到屏幕的左侧向右键 将窗口最大化到屏幕的右侧向下键 最小化窗口Home 最小化除活动窗口之外的所有窗口（win7）Shift + 向上键 将窗口拉伸到屏幕的顶部和底部。X 打开 Windows 移动中心]]></content>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建本博客所看的网站及知识]]></title>
    <url>%2F2016%2F04%2F24%2Fbuild-self-blog-knowledge%2F</url>
    <content type="text"><![CDATA[汇总一下，希望对以后自己动手搭建博客的伙伴们有帮助。 http://ibruce.info/2013/11/22/hexo-your-blog/https://xuanwo.org/2015/03/26/hexo-intor/http://blog.fens.me/hexo-blog-github/http://www.v2ex.com/t/175940http://www.jianshu.com/p/465830080ea9http://www.jianshu.com/p/2640561e96f8http://www.jianshu.com/p/739bf1305e66http://www.liuhaihua.cn/archives/180154.htmlhttp://www.jianshu.com/p/7ad9d3cd4d6ehttp://chitanda.me/2015/06/11/tips-for-setup-hexo http://qjzhixing.com/tools/http://zipperary.com/about/http://sconfield.github.io/ https://github.com/chuangwailinjie/chuangwailinjie.github.io/blob/master/404.htmlhttps://github.com/MOxFIVE/hexo-theme-yeleehttp://www.tuicool.com/articles/AfQnQjy/ http://www.tuicool.com/articles/Nnuyu2Ahttp://blog.fens.me/hexo-blog-github/ 详细语法http://wowubuntu.com/markdown/在线markdownhttp://markdown.xiaoshujiang.com/http://dillinger.io/https://www.zybuluo.com/mdeditor 下面是自己搭建博客的主要代码创建公钥ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;安装Hexonpm install hexo-cli -g（速度慢的话 用npm install -g cnpm --registry=https://registry.npm.taobao.org下面的npm都用cnpm） npm install hexo --save hexo -v 初始化Hexohexo init npm install 首次体验Hexo（http://localhost:4000/） hexo s hexo g 配置Deploymentgit config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; hexo d(如果报错，npm install hexo-deployer-git --save) 设计http://www.zcool.com.cn/http://www.uimaker.com/]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[备忘悬浮]]></title>
    <url>%2F2016%2F04%2F23%2Ffloat-windows%2F</url>
    <content type="text"><![CDATA[第一个写的较为美观(MD风格)，用了很多个自定义AlertDialog.Builder。 功能如标题，扩充标题的内容的话，就是把自己的备忘的内容添加到手机悬浮窗上。简言之备忘悬浮。 截图 下载链接Fir.im下载]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>备忘悬浮</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ShareMy]]></title>
    <url>%2F2016%2F04%2F23%2FShareMy%2F</url>
    <content type="text"><![CDATA[ShareMy 独自开发的第一个被应用商店审核通过的Application 功能及介绍功能分享自己文件，别人可以通过这个Application下载~ 介绍记得那是一个夜黑风高的晚上，我走在乡间的小路上，额，扯远了。做这个App是在大一上学期寒假快要结束的时候想到的，开学之后用课余时间开发的，当时是用的Eclipse，最近我也在学习用Android Studio，AS确实是比Eclipse好用，大概用了半个月时间，开发结束。无聊的时候，自己数了数大概2900行代码。然后我抱着试试的态度去小米应用商店上传审核，其实我的小米开发者平台在高中的时候已经审核通过了，之前也有传一些自己做的Application，但是都失败了，毕竟那些是用“我的应用iApp”做的。上传了之后，过了几天就忘了小米应用商店审核的事情，怪我，可能是因为我属鼠的~某一晚，我刚回到宿舍，小米应用商店给我发了一个邮件~就是审核通过了！瞬间爆炸，完成…。其实这个Application还有很多缺点，毕竟是我第一个独立完成的，最后的时候就有点累了，就没写完所有功能。而且代码命名方面存在一些缺点，而且把很多功能写到一个类里面了，这样后期维护也不好维护，等我抽个时间把代码修改修改，再写完其他功能，然后提交更新。 截图 应用下载链接小米应用商店Fir.im内测网站下载]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ShareMy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于搭建自己博客的事情]]></title>
    <url>%2F2016%2F04%2F22%2Fabout-build-blog%2F</url>
    <content type="text"><![CDATA[前言2016年4月18日在万网购买http://www.kiuber.top/域名，博客是用的Yelee主题，个人比较喜欢的主题还有Next。 高中的时候就want to搭建一个属于自己的博客，但是限于那时的终端类型时间知识等，完成不了。现在既有终端，又有时间，知识不敢说多厉害，基础的懂个差不多吧，革命尚未成功，同志仍需努力啊。个人不喜欢CSDN等博客，就拿CSDN博客来说吧，页面广告太多，用户体验差。 目的记录学习，记录生活，记录感想。 感谢hexo-theme-yeleeGitHub七牛云存储Hexo 写在结束我觉得高中自己也努力了，但是程度还不够吧，没考上本科，高中没大有什么后悔的事情，不过有一点很后悔的事情就是没有把语文好好学学，所以我打算在大学三年中，编程之外的空尽量多看些文学作品，加油吧，坚持吧，少年。]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
